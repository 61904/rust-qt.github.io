<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>About Ritual on Ritual</title><link>https://example.com/ritual/</link><description>Recent content in About Ritual on Ritual</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://example.com/ritual/index.xml" rel="self" type="application/rss+xml"/><item><title>Setting up</title><link>https://example.com/ritual/setting_up/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.com/ritual/setting_up/</guid><description>Using docker (recommended) To make sure the parsing results are consistent and reproducible, it&amp;rsquo;s recommended to use a reproducible environment, such as provided by docker.
Ritual provides Dockerfiles containing its dependencies:
docker.builder.dockerfile is the base image suitable for working on C++'s standard library. It also should be used as a base image when working on other C++ libraries. docker.qt.dockerfile is the image used for generating Qt crates. You can build the images with these commands:</description></item><item><title>Running generator</title><link>https://example.com/ritual/running_generator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://example.com/ritual/running_generator/</guid><description>Note: as described above, it&amp;rsquo;s recommended to use docker for creating a suitable environment.
The generator itself (ritual) is a library which exposes API for configurating different aspects of the process. In order to run the generator and produce an output crate, one must use a binary crate (such as qt_ritual) and launch the generator using its API.
Qt crates can be generated like this:
cd ritual cargo run --release --bin qt_ritual -- /path/to/workspace -c qt_core -o main The workspace directory will be used for storing databases, temporary files, and the generated crates.</description></item></channel></rss>